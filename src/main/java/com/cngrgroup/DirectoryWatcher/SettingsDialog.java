/*
 * The MIT License (MIT)
 *
 * Copyright (c) today.year. Philip A Senger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.cngrgroup.DirectoryWatcher;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

public class SettingsDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JTextField workingDir;
    private JTextField monitorDir;
    private JCheckBox recursive;
    private JSlider sensitivity;
    private JTextPane command;
    private JLabel sensitivityValue;
    private JButton workDirectorySelector;
    private JButton monitorDirectorySelector;
    private JPanel lowerPanel;
    private JPanel upperPanel;
    private JPanel okCancelPanel;
    private JPanel sensitivityPanel;
    private UserPreferences originalUserPreferences;

    public SettingsDialog() {
        super();
        pack();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        sensitivity.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                setSensitivityLabel(((JSlider) e.getSource()).getValue());
            }
        });
        workDirectorySelector.addActionListener(new DirectorySelector(workingDir));
        monitorDirectorySelector.addActionListener(new DirectorySelector(monitorDir));
    }

    private void onOK() {
        transposeDialogChanges(originalUserPreferences);
        dispose();
    }

    private void onCancel() {
        dispose();
    }

    public void setInitialDialogValues(UserPreferences data) {
        if (data == null) {
            throw new IllegalArgumentException("User Preferences can not be null.");
        } else {
            originalUserPreferences = data;
            workingDir.setText(data.getWorkingDir());
            monitorDir.setText(data.getMonitorDir());
            recursive.setSelected(data.isRecursive());
            command.setText(data.getCommand());
            sensitivity.setValue(data.getSensitivity());
            setSensitivityLabel(data.getSensitivity());
        }
    }

    private void setSensitivityLabel(int value) {
        sensitivityValue.setText(String.valueOf(value) + " Seconds");
    }

    public void transposeDialogChanges(UserPreferences userPreferences) {
        userPreferences.setWorkingDir(workingDir.getText());
        userPreferences.setMonitorDir(monitorDir.getText());
        userPreferences.setRecursive(recursive.isSelected());
        userPreferences.setCommand(command.getText());
        userPreferences.setSensitivity(sensitivity.getValue());
        userPreferences.notifyObservers();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        lowerPanel = new JPanel();
        lowerPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        contentPane.add(lowerPanel, gbc);
        okCancelPanel = new JPanel();
        okCancelPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        lowerPanel.add(okCancelPanel, gbc);
        buttonOK = new JButton();
        buttonOK.setText("OK");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        okCancelPanel.add(buttonOK, gbc);
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        okCancelPanel.add(buttonCancel, gbc);
        upperPanel = new JPanel();
        upperPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(upperPanel, gbc);
        upperPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null));
        final JLabel label1 = new JLabel();
        label1.setText("Comand");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        upperPanel.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Working Directory");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        upperPanel.add(label2, gbc);
        workingDir = new JTextField();
        workingDir.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        upperPanel.add(workingDir, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Monitor Directory");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        upperPanel.add(label3, gbc);
        monitorDir = new JTextField();
        monitorDir.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        upperPanel.add(monitorDir, gbc);
        recursive = new JCheckBox();
        recursive.setEnabled(true);
        recursive.setText("Recursively Scan Monitor Directory");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        upperPanel.add(recursive, gbc);
        sensitivity = new JSlider();
        sensitivity.setMajorTickSpacing(1);
        sensitivity.setMaximum(10);
        sensitivity.setMinimum(1);
        sensitivity.setPaintLabels(false);
        sensitivity.setPaintTicks(true);
        sensitivity.setPaintTrack(true);
        sensitivity.setSnapToTicks(true);
        sensitivity.setValue(5);
        sensitivity.setValueIsAdjusting(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        upperPanel.add(sensitivity, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        upperPanel.add(scrollPane1, gbc);
        command = new JTextPane();
        command.setText("");
        scrollPane1.setViewportView(command);
        sensitivityPanel = new JPanel();
        sensitivityPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        upperPanel.add(sensitivityPanel, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Sensitivity");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        sensitivityPanel.add(label4, gbc);
        sensitivityValue = new JLabel();
        sensitivityValue.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        sensitivityPanel.add(sensitivityValue, gbc);
        workDirectorySelector = new JButton();
        workDirectorySelector.setText("Browse");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        upperPanel.add(workDirectorySelector, gbc);
        monitorDirectorySelector = new JButton();
        monitorDirectorySelector.setText("Browse");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        upperPanel.add(monitorDirectorySelector, gbc);
        label1.setLabelFor(command);
        label2.setLabelFor(workingDir);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private class DirectorySelector implements ActionListener {
        private JTextField directoryPlaceHolder;

        public DirectorySelector(JTextField directoryPlaceHolder) {
            this.directoryPlaceHolder = directoryPlaceHolder;
        }

        public void selectDirectory(String originalValue) {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File(originalValue));
            chooser.setDialogTitle("Choice a directory");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                this.directoryPlaceHolder.setText(chooser.getSelectedFile().toString());
            } else {
                this.directoryPlaceHolder.setText(originalValue);
            }
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            selectDirectory(this.directoryPlaceHolder.getText());
        }
    }


}
